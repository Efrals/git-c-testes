Dica:
Sempre dar um git pull ou git merge para puxar as alterações mais atualizadas do projeto

clear = limpa a tela

cd = muda diretório

cd .. = Volta na pasta anterior

ls = lista arquivos e pastas

ls -al = lista arquivos e pastas ocultos

git add NOME_DO_ARQUIVO = adidiona o arquivo ao repositório em caso de commit

git add . = adidiona todos arquivos ao repositório em caso de commit

git rm NOME_DO_ARQUIVO = remove arquivo (Tem de finalizar com commit e push)

git mv NOME_DO_ARQUIVO DIRETÓRIO/NOME_DO_ARQUIVO = move arquivos (Se alterar o nome ao mover renomeará o arquivo) (Tem de finalizar com commit e push)

git checkout NOME_DO_ARQUIVO = desfaz alterações no arquivo

git status = visualiza o status dos arquivos commitados ou não

git commit -m "MENSAGEM" = armazena o conteúdo atual do index ao novo commit do repositório junto com a mensagem do usuário descrevendo as alterações realizadas

git clone LINK_REPOSITÓRIO = clona de todo repositório

git clone LINK_REPOSITÓRIO . = clona arquivos do repositório em pastas existentes 

git push = sobe arquivos para o repositório remoto

git branch -M NOME_DA_BRANCH = Cria ou renomeia uma branch (-M indica master)

git branch = Mostra as branches criadas

git checkout NOME_DA_BRANCH = Troca de branch

git checkout -b NOME_DA_BRANCH = Cria uma nova branch e troca para ela

git branch -d NOME_DA_BRANCH = Deleta uma branch (-d indica DELETAR)

git merge NOME_DA_BRANCH_A_SER_MESCLADA = Mescla código (Se estiver na branch main, os recursos da outra branch virão para a main)

git config --global user.name "SEU_NOME" = troca o nome do usuário

git config --global user.email "SEU_E-MAIL" = troca o e-mail do usuário

git help = mostra informações

git help COMANDO = mostra informações sobre o comando

git log NOME_DO_ARQUIVO = visualizar o histórico dos commits por arquivo

git log = possibilita visualizar o histórico dos commits de todos arquivos

git log --oneline NOME_DO_ARQUIVO = mostra DIGITOS_ÚNICOS_DO COMMIT e histórico dos commits por arquivo em uma linha

git show QUATRO_PRIMEIROS_DIGITOS_ÚNICOS_DO COMMIT = mostra diferenças entre as alteraçoes feitas

git diff = mostra diferenças feitas nos arquivos a serem commitados

git diff NOME_DO_ARQUIVO = mostra diferenças feitas em um arquivo específico

git diff DIGITOS_ÚNICOS_DO COMMIT DIGITOS_ÚNICOS_DO COMMIT = mostra diferenças entre dois commits

git reset HEAD = descarta alterações de commits pendentes, tendo de adicionar por git add novamente

git reset NOME_DO_ARQUIVO = tira o arquivos do rastreamento Git

git reset --soft COMMIT = reseta alterações para um commit especificado, mantendo os arquivos em estado Staging

git reset --mixed COMMIT = padrão, não precisa colocar o --mixed. reseta alterações para um commit especificado, mantendo o arquivo no repositório

git reset --hard COMMIT = reseta alterações para um commit especificado, removendo definitivamente do commit indicado para frente (NÃO SEGURO)


AVANÇADOS:
git stash = salva as modificações feitas em um "rascunho local"

git stash push -m "MENSAGEM" = salva as modificações com descrição

git stash list = lista stashs salvas (0 é o mais atual seguindo para as stashs anteriores))

git stash show -p NUMERO_DA_STASH = exibe o que foi modificado na stash selecionadsa

git stash apply NUMERO_DA_STASH = recupera uma stash indicada

git stash drop NUMERO_DA_STASH = remove uma stash indicada

git stash clear = remove TODAS stashs

git tag -a NOME_DA_TAG -m "DESCRIÇÃO" = cria uma tag que agrupa alterações

git tag -d NOME_DA_TAG = remove a tag

git show NOME_DA_TAG = exibe detalhes de alterações na tag

git checkuot NOME_DA_TAG = vai para o grupo onde a tag aponta

git push origin NOME_DA_TAG = envia alterações relativas a uma tag para o repositório

git push origin --tags = envia as alterações relativas a todas as tags para o repositório

git fetch -a = atualiza todas as branches e tags do repositório remoto para a máquina local
                *para visualizar tem de um git checkout

git rebase NOME_DA_BRANCH_A_SER_MESCLADA = traz e reorganiza a branch selecionada para que posso fazer merge posteriormente (NÃO RECOMENDADO para repositórios públicos)


CRIAR REPOSITÓRIO VAZIO
git branch -M NOME_DA_BRANCH = Cria ou ronomea uma branch

git remote add origin CHAVE_HTTPS_OU_SSH = seleciona o repositório remoto a ser usado

git push -u origin BRANCH_A_SER_USADA = sobe arquivos da máquina para o repositório remoto


ls -al ~/.ssh = mostra se as chaves SSH existentes estão presentes

ssh-keygen -t ed25519 -C "seu e-mail do repositório" = gerar chave SSH em github

crtl + u = para apagar a senha digitada

clip < ~/.ssh/id_ed25519.pub


Dica Git Bash:

Para colar algo já escrito, pode-se somente selecionar o que deseja escrever e clicar com o Scroll